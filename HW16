ChatContext.cs
===============================================================================
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;

namespace Seminar_16_EF
{
    public class ChatContext : DbContext
    {
        public DbSet<User> Users { get; set; }
        public DbSet<Message> Messages { get; set; }
        
        public ChatContext()
        {

        }
        
        public ChatContext(DbContextOptions<ChatContext> dbc) : base(dbc)
        {

        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@"Server=.;Database=GB;Integrated Security=False;TrustServerCertificate=True;Trusted_Connection=True;")
                .UseLazyLoadingProxies();
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("users");
                entity.HasKey(x => x.Id).HasName("userPk");
                entity.HasIndex(x => x.FullName).IsUnique();
                entity.Property(e => e.FullName)
                .HasColumnName("FullName")
                .HasMaxLength(255)
                .IsRequired();
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.ToTable("messages");
                entity.HasKey(x => x.MessageId).HasName("messagePk");

                entity.Property(e => e.Text)
                .HasColumnName("messageText");
                entity.Property(e => e.DateSend)
                .HasColumnName("messageData");
                entity.Property(e => e.IsSent)
                .HasColumnName("is_sent");
                entity.Property(e => e.MessageId)
                .HasColumnName("id");

                entity.HasOne(x => x.UserTo)
                .WithMany(m=>m.MessageTo)
                .HasForeignKey(x=>x.UserToId)
                .HasConstraintName("messageToUserFK");

                entity.HasOne(x => x.UserFrom)
                .WithMany(m => m.MessageFrom)
                .HasForeignKey(x => x.UserFromId)
                .HasConstraintName("messageFromUserFK");
            });
        }
    }
}




Message.cs
===============================================================================
namespace Seminar_16_EF
{
    public class Message
    {        
        public int? MessageId { get; set; }
        public string? Text { get; set; }
        public DateTime DateSend { get; set; }
        public bool IsSent { get; set; }
        public int? UserToId { get; set; }
        public int? UserFromId { get; set; }
        public virtual User? UserTo { get; set; }
        public virtual User? UserFrom { get; set; }
    }
}



NetMessage.cs
===============================================================================
using System.Text.Json;

namespace Seminar_16_EF
{

    public enum Command
    {
        Register,
        Message,
        Confirmation
    }

    public class NetMessage
    {
        public int? Id { get; set; }
        public string? Text { get; set; }
        public DateTime DateTime { get; set; }
        public int? NickNameFrom { get; set; }
        public int? NickNameTo { get; set; }
        public Command Command { get; set; }
        public string SerializeMessageToJson() => JsonSerializer.Serialize(this);
        public static NetMessage? DeserializeFromJson(string message) => JsonSerializer.Deserialize<NetMessage>(message);
        public void PrintGetMessageFrom()
        {
            Console.WriteLine(ToString());
        }

        public override string ToString()
        {
            return $"{this.DateTime} получено сообщение {this.Text} от {this.NickNameFrom}";
        }
    }
}



User.cs
===============================================================================
namespace Seminar_16_EF
{
    public class User
	{
		public virtual List<Message>? MessageTo { get; set; } = new();
        public virtual List<Message>? MessageFrom { get; set; } = new();
		public int Id { get; set; }
		public string? FullName { get; set; }
    }
}
