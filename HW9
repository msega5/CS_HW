using System.Dynamic;
using System.Reflection;
using System.Text;


namespace HW_9
{
    [AttributeUsage(AttributeTargets.Field)]
    class CustomNameAttribute : Attribute
    {
        public string Name { get; }

        public CustomNameAttribute(string name)
        {
            Name = name;
        }
    }

    class TestClass
    {
        public int I { get; set; }
        public string? S { get; set; }
        public decimal D { get; set; }
        public char[]? C { get; set; }

        public TestClass()
        {

        }
        public TestClass(int i)
        {
            this.I = i;
        }
        public TestClass(int i, string s, decimal d, char[] c) : this(i)
        {
            this.S = s;
            this.D = d;
            this.C = c;
        }
    }
   

    internal class Program
    {
        static string ObjectToString(object o)
        {
            StringBuilder sb = new StringBuilder();
            Type t = o.GetType();
            sb.Append(t.AssemblyQualifiedName + ":");
            sb.Append(t.Name + "|");
            var properties = t.GetFields();

            foreach (var p in properties)
            {
                Console.WriteLine(p);
                CustomNameAttribute attribute = p.GetCustomAttribute<CustomNameAttribute>();

                if (attribute != null)
                {
                    string fieldName = attribute.Name;
                    object fieldValue = p.GetValue(o);

                    sb.AppendFormat("{0}:{1}", fieldName, fieldValue);
                    sb.AppendLine();
                }
            }
            return sb.ToString();
        }

        
        static void Main(string[] args)
        {
            Type type = typeof(TestClass);

            var t1 = ObjectToString(type);
            Console.WriteLine(t1);
            //var t2 = Activator.CreateInstance(type, new Object[] { 1, "String", 0.5m, new char[] { '1', '4' } });
        }
    }
}
